!function e(t,n,i){function r(s,a){if(!n[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(o)return o(s,!0);var d=new Error("Cannot find module '"+s+"'");throw d.code="MODULE_NOT_FOUND",d}var h=n[s]={exports:{}};t[s][0].call(h.exports,function(e){var n=t[s][1][e];return r(n?n:e)},h,h.exports,e,t,n,i)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<i.length;s++)r(i[s]);return r}({1:[function(e){"use strict";window.Showy=e("./src/showy")["default"]},{"./src/showy":2}],2:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a=e("./transitions"),l=i(a),d="forwards",h="backwards",u="random";Object.defineProperty(HTMLMediaElement.prototype,"playing",{get:function(){return!!(this.currentTime>0&&!this.paused&&!this.ended&&this.readyState>2)}});var c=function(){function e(t){r(this,e);var n={container:"body",slides:[],autoplay:!1,slideDuration:3e3,transitions:l["default"],transition:{name:"random",duration:2e3,ease:"linear",priority:0}};this.config=_.merge({},n,t),this.container="string"==typeof this.config.container?document.querySelector(this.config.container):this.config.container,this.container.style.display="block",this.container.style.position="absolute",this.container.style.top="0",this.container.style.left="0",this.container.style.width="100%",this.container.style.height="100%",this._slides=this.config.slides,this._currentSlideIndex=this._transitionToIndex=0,this._currentSlideRendered=!1,this._transitionProgress=0,this._imageMap={},this._videoMap={},this._slideContentMap={},this._ready=!1,this._destroyed=!1,this._playing=this.config.autoplay,this._createCanvases(),this.transition=this._getTransition(),this._resizeHandler=this.resize.bind(this),window.addEventListener("resize",this._resizeHandler),this._lastFrameTime=0,window.requestAnimationFrame(this._animate.bind(this))}return s(e,[{key:"goToSlide",value:function(e,t){this._transitionToIndex=e,this._transitionDirection=t,this._currentSlideRendered=!1,this._playSlideContent(this._transitionToIndex),this._autoPlayTimeout&&clearTimeout(this._autoPlayTimeout)}},{key:"nextSlide",value:function(){this._transitionToIndex===this._currentSlideIndex-1||this._transitionToIndex===this._slides.length-1&&0===this._currentSlideIndex?this.goToSlide(this._currentSlideIndex,d):this.goToSlide(this._currentSlideIndex===this._slides.length-1?0:this._currentSlideIndex+1,d)}},{key:"prevSlide",value:function(){this._transitionToIndex===this._currentSlideIndex+1||0===this._transitionToIndex&&this._currentSlideIndex===this._slides.length-1?this.goToSlide(this._currentSlideIndex,h):this.goToSlide(0===this._currentSlideIndex?this._slides.length-1:this._currentSlideIndex-1,h)}},{key:"play",value:function(){this._playing=!0,this.nextSlide()}},{key:"pause",value:function(){this._playing=!1,this._autoPlayTimeout&&clearTimeout(this._autoPlayTimeout)}},{key:"destroy",value:function(){this._destroyed=!0,window.removeEventListener("resize",this._resizeHandler);for(var e in this._videoMap){var t=this._videoMap[e];this.container.removeChild(t),t=null}this._videoMap=null}},{key:"_transitionEnded",value:function(){}},{key:"_videoEnded",value:function(){var e=this._slides[this._transitionToIndex];if(this._playing&&e.duration&&_.isFunction(e.duration)){var t=e.duration();"video"===t.type&&this.nextSlide()}}},{key:"_slideLoaded",value:function(){}},{key:"_slideRendered",value:function(){var e=this;this._ready||(this._ready=!0,this.container.classList.add("showy--ready"));var t=this._slides[this._transitionToIndex];if(this._playing){var n=this.config.slideDuration;if(t.duration){if(_.isFunction(t.duration)){var i=t.duration();if("video"===i.type)return}_.isNumber(t.duration)&&(n=t.duration)}this._autoPlayTimeout=setTimeout(function(){e.nextSlide()},n)}}},{key:"_animate",value:function(e){if(!this._destroyed){this._fps=1e3/(e-this._lastFrameTime);try{this._drawSlides(),window.requestAnimationFrame(this._animate.bind(this))}catch(t){console.error(t.stack)}this._lastFrameTime=e}}},{key:"_createCanvas",value:function(){var e=document.createElement("canvas");return e.style.position="absolute",e.style.width="100%",e.style.height="100%",this._resizeCanvas(e),e}},{key:"_createCanvases",value:function(){this._currentCanvas=this._createCanvas(),this._currentContext=this._currentCanvas.getContext("2d"),this._nextCanvas=this._createCanvas(),this._nextContext=this._nextCanvas.getContext("2d"),this._prevCanvas=this._createCanvas(),this._prevContext=this._prevCanvas.getContext("2d"),this._renderCanvas=this._createCanvas(),this._renderContext=this._renderCanvas.getContext("webgl")||this._renderCanvas.getContext("experimental-webgl"),this._renderContext.pixelStorei(this._renderContext.UNPACK_FLIP_Y_WEBGL,!0),this.container.appendChild(this._renderCanvas)}},{key:"_resizeCanvas",value:function(e){this._scale=window.devicePixelRatio,e.width=this.container.clientWidth*this._scale,e.height=this.container.clientHeight*this._scale}},{key:"resize",value:function(){this._slideContentMap={},this._resizeCanvas(this._currentCanvas),this._resizeCanvas(this._nextCanvas),this._resizeCanvas(this._prevCanvas),this._resizeCanvas(this._renderCanvas),this._drawSlides(!0)}},{key:"_clearContext",value:function(e){e.clearRect(0,0,e.canvas.width,e.canvas.height)}},{key:"_transitionInProgress",value:function(){return this._transitionProgress>0&&this._transitionProgress<1}},{key:"_getTransition",value:function(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],n=_.merge({},this.config.transition,e||{}),i=_.merge({},this.config.transition,t||{});return n.shader=n.name===u?_.sample(this.config.transitions):this.config.transitions[n.name],i.shader=i.name===u?_.sample(this.config.transitions):this.config.transitions[i.name],n.priority>=i.priority?n:i}},{key:"_drawSlides",value:function(e){var t=this._slides[this._currentSlideIndex],n=this._slides[this._currentSlideIndex===this._slides.length-1?0:this._currentSlideIndex+1],i=this._slides[0===this._currentSlideIndex?this._slides.length-1:this._currentSlideIndex-1],r=void 0;if(e&&(t._rendered=!1),t._hasVideo||!t._rendered||this._transitionInProgress()||this._currentSlideIndex!==this._transitionToIndex){if(this._drawSlide(this._currentContext,t),this._drawSlide(this._nextContext,n),this._drawSlide(this._prevContext,i),this._fromTexture&&this._fromTexture.dispose(),this._toTexture&&this._toTexture.dispose(),this._transitionToIndex!==this._currentSlideIndex||this._transitionInProgress()){(this._transitionToIndex!==this._currentSlideIndex&&this._transitionDirection===d||this._transitionToIndex===this._currentSlideIndex&&this._transitionDirection===h)&&(this._fromTexture=createTexture(this._renderContext,this._currentCanvas),this._toTexture=createTexture(this._renderContext,this._nextCanvas),r=this._getTransition(t.transitionNext,n.transitionPrev)),(this._transitionToIndex!==this._currentSlideIndex&&this._transitionDirection===h||this._transitionToIndex===this._currentSlideIndex&&this._transitionDirection===d)&&(this._fromTexture=createTexture(this._renderContext,this._prevCanvas),this._toTexture=createTexture(this._renderContext,this._currentCanvas),r=this._getTransition(t.transitionPrev,i.transitionNext));var o=60/r.duration;this._transitionDirection===d&&(this._transitionProgress=this._transitionInProgress()?this._transitionProgress+o:o),this._transitionDirection===h&&(this._transitionProgress=this._transitionInProgress()?this._transitionProgress-o:1-o),this._transitionProgress>1&&(this._transitionProgress=1),this._transitionProgress<0&&(this._transitionProgress=0)}else this._fromTexture=createTexture(this._renderContext,this._currentCanvas),this._toTexture=this._fromTexture;!r||this._transitionInProgress()||this.transition.name===r.name&&this.transition.name!==u||(this.transition=r,this._transition&&(this._transition.dispose(),this._transition=null)),this._transition||(this._transition=createTransition(this._renderContext,this.transition.shader.glsl));var s=eases[this.transition.ease](this._transitionProgress);this._transition.render(s,this._fromTexture,this._toTexture,this.transition.shader.uniforms),t._ready&&(t._rendered=!0,this._currentSlideRendered||(this._currentSlideRendered=!0,this._slideRendered())),this._transitionToIndex===this._currentSlideIndex||this._transitionInProgress()||(this._currentSlideIndex=this._transitionToIndex,this._clearContext(this._currentContext),this._clearContext(this._nextContext),this._clearContext(this._prevContext),this._pauseSlideContent(),this._transitionEnded())}}},{key:"_drawSlide",value:function(e,t){t._hasVideo=t.content.filter(function(e){return"video"===e.type}).length>0,t._rendered=!1,t._ready=!1,t._loaded||(t._loaded=!1),t.background&&(e.fillStyle=t.background,e.fillRect(0,0,e.canvas.width,e.canvas.height)),t.content.length&&this._drawSlideContent(e,t,0)}},{key:"_drawSlideContent",value:function(e,t,n){var i=t.content[n];if(!i)return t._ready=!0,void(t._loaded||(t._loaded=!0,this._slideLoaded(t,this._slides.indexOf(t))));var r=this._drawSlideContent.bind(this,e,t,n+1);switch(i.type){case"image":this._drawImage(e,i,r);break;case"video":this._drawVideo(e,i,r);break;default:throw new Error("Unknown content type")}}},{key:"_position2Pixels",value:function(e){var t=this,n=arguments.length<=1||void 0===arguments[1]?1:arguments[1],i=[];return e.forEach(function(e,r){var o=void 0,s=[t._currentCanvas.width,t._currentCanvas.height,t._currentCanvas.width,t._currentCanvas.height][r];s/=n,o=1>=e?2>r?e*s:e*s-i[r-2]:2>r?e:s-i[r-2]-e,i.push(o)}),{x:i[0]*n,y:i[1]*n,width:i[2]*n,height:i[3]*n}}},{key:"_updateCoords",value:function(e,t,n){var i=e.width/e.height,r=t.width/t.height;if(n&&"fill"===n){if(r>i){var o=t.height*(e.width/t.width);e.y=e.y+.5*(e.height-o),e.height=o}if(i>r){var s=t.width*(e.height/t.height);e.x=e.x+.5*(e.width-s),e.width=s}}else{if(i>r){var a=t.width*(e.height/e.width);t.y=t.y+.5*(t.height-a),t.height=a}if(r>i){var l=t.height*i;t.x=t.x+.5*(t.width-l),t.width=l}}var d=["x","y","width","height"];return d.forEach(function(n){e[n]=Math.round(e[n]),t[n]=Math.round(t[n])}),{src:e,dst:t}}},{key:"_getTile",value:function(e,t){return{x:e.x,y:e.y,width:t[0]<=1?e.width*t[0]:t[0],height:t[1]<=1?e.height*t[1]:t[1]}}},{key:"_drawTiles",value:function(e,t,n,i){var r=void 0,o=void 0,s=0,a=0;n&&"fill"===n?(r=Math.ceil(e.height/t.height),o=Math.ceil(e.width/t.width),s=.5*(t.width*o-e.width),a=.5*(t.height*r-e.height)):(r=Math.floor(e.height/t.height),o=Math.floor(e.width/t.width));for(var l=0,d=0,h=r*o,u=0;h>u;u++)i({x:t.x+d*t.width-s,y:t.y+l*t.height-a}),d===o-1&&l++,d=o-1>d?d+1:0}},{key:"_getImageData",value:function(e,t,n,i,r){var o=document.createElement("canvas");o.width=e.naturalWidth,o.height=e.naturalHeight;var s=o.getContext("2d");return s.drawImage(e,0,0,e.naturalWidth,e.naturalHeight),s.getImageData(t,n,i,r).data}},{key:"_getImage",value:function(e,t){var n=this;if(this._imageMap[e])return void t(this._imageMap[e]);var i=new Image;i.crossOrigin="Anonymous",i.src=e,i.onload=function(){n._imageMap[e]=i,t(i)}}},{key:"_resizeImage",value:function(e,t,n,i){var r=this,o=JSON.stringify({src:e.src,dst:n});return this._slideContentMap[o]?void i(this._slideContentMap[o]):void pica.resizeBuffer({src:this._getImageData(e,t.x,t.y,t.width,t.height),width:t.width,height:t.height,toWidth:n.width,toHeight:n.height,quality:1,alpha:!1,unsharpAmount:0,unsharpRadius:.5,unsharpThreshold:0},function(e,t){var s=new ImageData(new Uint8ClampedArray(t),n.width,n.height);r._slideContentMap[o]=s,i(r._slideContentMap[o])})}},{key:"_drawImage",value:function(e,t,n){var i=this;this._getImage(t.url,function(r){var s={x:0,y:0,width:r.naturalWidth,height:r.naturalHeight},a=i._position2Pixels(t.position,i._scale);if(t.tile){var l=function(){var o=i._getTile(a,t.tile.size),l=i._updateCoords(s,o,t.tile.scaleMode);return i._resizeImage(r,l.src,l.dst,function(r){i._drawTiles(a,l.dst,t.scaleMode,function(t){e.putImageData(r,t.x,t.y)}),n()}),{v:void 0}}();if("object"===("undefined"==typeof l?"undefined":o(l)))return l.v}var d=i._updateCoords(s,a,t.scaleMode);s=d.src,a=d.dst,i._resizeImage(r,s,a,function(t){e.putImageData(t,a.x,a.y),n()})})}},{key:"_getVideoData",value:function(e){var t=document.createElement("canvas");t.width=e.videoWidth,t.height=e.videoHeight;var n=t.getContext("2d");return n.drawImage(e,0,0,e.videoWidth,e.videoHeight),n._getImageData(0,0,e.videoWidth,e.videoHeight).data}},{key:"_getVideo",value:function(e){var t=this,n=arguments.length<=1||void 0===arguments[1]?function(){}:arguments[1],i=JSON.stringify(e.sources);if(this._videoMap[i])return n(this._videoMap[i]),this._videoMap[i];var r=document.createElement("video");return r.style.display="none",r.crossOrigin="anonymous",r.muted=!0,this.container.appendChild(r),e.sources.forEach(function(e){var t=document.createElement("source");t.src=e.url,t.type=e.type,r.appendChild(t)}),this._videoMap[i]=r,r.addEventListener("loadedmetadata",function(){n(r)}),r._playCount=0,r.addEventListener("ended",function(){r.play(),r._playCount+=1,t._videoEnded(r,e)}),r}},{key:"_drawVideo",value:function(e,t,n){var i=this;this._getVideo(t,function(r){if(0!==r.videoWidth&&0!==r.videoHeight){var s={x:0,y:0,width:r.videoWidth,height:r.videoHeight},a=i._position2Pixels(t.position,i._scale);if(t.tile){var l=function(){var o=i._getTile(a,t.tile.size),l=i._updateCoords(s,o,t.tile.scaleMode);return i._drawTiles(a,l.dst,t.scaleMode,function(t){e.drawImage(r,s.x,s.y,s.width,s.height,t.x,t.y,o.width,o.height)}),n(),{v:void 0}}();if("object"===("undefined"==typeof l?"undefined":o(l)))return l.v}var d=i._updateCoords(s,a,t.scaleMode);s=d.src,a=d.dst,e.drawImage(r,s.x,s.y,s.width,s.height,a.x,a.y,a.width,a.height),n()}})}},{key:"_playSlideContent",value:function(e){var t=this;this._slides[e].content.forEach(function(e){"video"===e.type&&t._getVideo(e,function(e){e._playCount=0,e.currentTime=0,e.play()})})}},{key:"_pauseSlideContent",value:function(){var e=this,t=[];this._slides[this._currentSlideIndex].content.forEach(function(n){"video"===n.type&&t.push(e._getVideo(n))}),this._slides.forEach(function(n,i){i!==e._currentSlideIndex&&n.content.forEach(function(n){"video"===n.type&&e._getVideo(n,function(e){-1===t.indexOf(e)&&(e._playCount=0,e.currentTime=0,e.pause())})})})}}]),e}();n["default"]=c},{"./transitions":3}],3:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i={wipeUp:{glsl:"\n      #ifdef GL_ES\n      precision highp float;\n      #endif\n      uniform sampler2D from, to;\n      uniform float progress;\n      uniform vec2 resolution;\n\n      void main() {\n        vec2 p = gl_FragCoord.xy / resolution.xy;\n        vec4 a = texture2D(from, p);\n        vec4 b = texture2D(to, p);\n        gl_FragColor = mix(a, b, step(0.0 + p.y, progress));\n      }\n    ",uniforms:{}},wipeDown:{glsl:"\n      #ifdef GL_ES\n      precision highp float;\n      #endif\n      uniform sampler2D from, to;\n      uniform float progress;\n      uniform vec2 resolution;\n\n      void main() {\n        vec2 p = gl_FragCoord.xy / resolution.xy;\n        vec4 a = texture2D(from, p);\n        vec4 b = texture2D(to, p);\n        gl_FragColor = mix(a, b, step(1.0 - p.y, progress));\n      }\n    ",uniforms:{}},wipeRight:{glsl:"\n      #ifdef GL_ES\n      precision highp float;\n      #endif\n      uniform sampler2D from, to;\n      uniform float progress;\n      uniform vec2 resolution;\n\n      void main() {\n        vec2 p = gl_FragCoord.xy / resolution.xy;\n        vec4 a = texture2D(from, p);\n        vec4 b = texture2D(to, p);\n        gl_FragColor = mix(a, b, step(0.0 + p.x, progress));\n      }\n    ",uniforms:{}},wipeLeft:{glsl:"\n      #ifdef GL_ES\n      precision highp float;\n      #endif\n      uniform sampler2D from, to;\n      uniform float progress;\n      uniform vec2 resolution;\n\n      void main() {\n        vec2 p = gl_FragCoord.xy / resolution.xy;\n        vec4 a = texture2D(from, p);\n        vec4 b = texture2D(to, p);\n        gl_FragColor = mix(a, b, step(1.0 - p.x, progress));\n      }\n    ",uniforms:{}},circle:{glsl:"\n      #ifdef GL_ES\n      precision highp float;\n      #endif\n\n      uniform sampler2D from, to;\n      uniform float progress;\n      uniform vec2 resolution;\n\n      uniform float centerX;\n      uniform float centerY;\n      uniform float smoothness;\n      uniform bool grow;\n\n      vec2 center = vec2(centerX, 1.0 - centerY);\n      float scale = sqrt(min(resolution[0] / resolution[1], resolution[1] / resolution[0]) / max(centerX, 1.0 - centerY));\n\n      void main() {\n        vec2 p = gl_FragCoord.xy / resolution.xy;\n        float size = grow ? progress : 1.0 - progress;\n        float dist = distance(center, p);\n        float circle = smoothstep(-smoothness, 0.0, scale * dist - size * (1.0 + smoothness));\n        gl_FragColor = mix(texture2D(from, p), texture2D(to, p), grow ? 1.0 - circle : circle);\n      }\n    ",uniforms:{centerX:.5,centerY:.5,smoothness:0,grow:!0}},circleInOut:{glsl:"\n      #ifdef GL_ES\n      precision highp float;\n      #endif\n      uniform sampler2D from, to;\n      uniform float progress;\n      uniform vec2 resolution;\n\n      float maxRadius = resolution.x + resolution.y;\n\n      void main() {\n        vec2 p = gl_FragCoord.xy / resolution.xy;\n\n        float distX = gl_FragCoord.x - resolution.x / 2.0;\n        float distY = gl_FragCoord.y - resolution.y / 2.0;\n        float dist = sqrt(distX * distX + distY * distY);\n\n        float step = 2.0 * abs(progress - 0.5);\n        step = step * step * step;\n\n        if (dist < step * maxRadius)\n        {\n          if (progress < 0.5)\n            gl_FragColor = texture2D(from, p);\n          else\n            gl_FragColor = texture2D(to, p);\n        }\n        else\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      }\n    ",uniforms:{}},splitVertical:{glsl:"\n      #ifdef GL_ES\n      precision highp float;\n      #endif\n\n      // General parameters\n      uniform sampler2D from;\n      uniform sampler2D to;\n      uniform float progress;\n      uniform vec2 resolution;\n\n      uniform float reflection;\n      uniform float perspective;\n      uniform float depth;\n\n      const vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n      const vec2 boundMin = vec2(0.0, 0.0);\n      const vec2 boundMax = vec2(1.0, 1.0);\n\n      bool inBounds (vec2 p) {\n        return all(lessThan(boundMin, p)) && all(lessThan(p, boundMax));\n      }\n\n      vec2 project (vec2 p) {\n        return p * vec2(1.0, -1.2) + vec2(0.0, -0.02);\n      }\n\n      vec4 bgColor (vec2 p, vec2 pto) {\n        vec4 c = black;\n        pto = project(pto);\n        if (inBounds(pto)) {\n          c += mix(black, texture2D(to, pto), reflection * mix(1.0, 0.0, pto.y));\n        }\n        return c;\n      }\n\n      void main() {\n        vec2 p = gl_FragCoord.xy / resolution.xy;\n\n        vec2 pfr = vec2(-1.), pto = vec2(-1.);\n\n        float middleSlit = 2.0 * abs(p.x-0.5) - progress;\n        if (middleSlit > 0.0) {\n          pfr = p + (p.x > 0.5 ? -1.0 : 1.0) * vec2(0.5*progress, 0.0);\n          float d = 1.0/(1.0+perspective*progress*(1.0-middleSlit));\n          pfr.y -= d/2.;\n          pfr.y *= d;\n          pfr.y += d/2.;\n        }\n\n        float size = mix(1.0, depth, 1.-progress);\n        pto = (p + vec2(-0.5, -0.5)) * vec2(size, size) + vec2(0.5, 0.5);\n\n        if (inBounds(pfr)) {\n          gl_FragColor = texture2D(from, pfr);\n        }\n        else if (inBounds(pto)) {\n          gl_FragColor = texture2D(to, pto);\n        }\n        else {\n          gl_FragColor = bgColor(p, pto);\n        }\n      }\n    ",uniforms:{reflection:0,perspective:0,depth:1}},slideUp:{glsl:"\n      #ifdef GL_ES\n      precision highp float;\n      #endif\n      uniform sampler2D from, to;\n      uniform float progress;\n      uniform vec2 resolution;\n\n      uniform float translateX;\n      uniform float translateY;\n\n      void main() {\n          vec2 texCoord = gl_FragCoord.xy / resolution.xy;\n          float x = progress * translateX;\n          float y = progress * translateY;\n\n          if (x >= 0.0 && y >= 0.0) {\n              if (texCoord.x >= x && texCoord.y >= y) {\n                  gl_FragColor = texture2D(from, texCoord - vec2(x, y));\n              }\n              else {\n                  vec2 uv;\n                  if (x > 0.0)\n                      uv = vec2(x - 1.0, y);\n                  else if (y > 0.0)\n                      uv = vec2(x, y - 1.0);\n                  gl_FragColor = texture2D(to, texCoord - uv);\n              }\n          }\n          else if (x <= 0.0 && y <= 0.0) {\n              if (texCoord.x <= (1.0 + x) && texCoord.y <= (1.0 + y))\n                  gl_FragColor = texture2D(from, texCoord - vec2(x, y));\n              else {\n                  vec2 uv;\n                  if (x < 0.0)\n                      uv = vec2(x + 1.0, y);\n                  else if (y < 0.0)\n                      uv = vec2(x, y + 1.0);\n                  gl_FragColor = texture2D(to, texCoord - uv);\n              }\n          }\n          else\n              gl_FragColor = vec4(0.0);\n      }\n    ",uniforms:{translateX:0,translateY:1}},slideDown:{glsl:"\n      #ifdef GL_ES\n      precision highp float;\n      #endif\n      uniform sampler2D from, to;\n      uniform float progress;\n      uniform vec2 resolution;\n\n      uniform float translateX;\n      uniform float translateY;\n\n      void main() {\n          vec2 texCoord = gl_FragCoord.xy / resolution.xy;\n          float x = progress * translateX;\n          float y = progress * translateY;\n\n          if (x >= 0.0 && y >= 0.0) {\n              if (texCoord.x >= x && texCoord.y >= y) {\n                  gl_FragColor = texture2D(from, texCoord - vec2(x, y));\n              }\n              else {\n                  vec2 uv;\n                  if (x > 0.0)\n                      uv = vec2(x - 1.0, y);\n                  else if (y > 0.0)\n                      uv = vec2(x, y - 1.0);\n                  gl_FragColor = texture2D(to, texCoord - uv);\n              }\n          }\n          else if (x <= 0.0 && y <= 0.0) {\n              if (texCoord.x <= (1.0 + x) && texCoord.y <= (1.0 + y))\n                  gl_FragColor = texture2D(from, texCoord - vec2(x, y));\n              else {\n                  vec2 uv;\n                  if (x < 0.0)\n                      uv = vec2(x + 1.0, y);\n                  else if (y < 0.0)\n                      uv = vec2(x, y + 1.0);\n                  gl_FragColor = texture2D(to, texCoord - uv);\n              }\n          }\n          else\n              gl_FragColor = vec4(0.0);\n      }\n    ",uniforms:{translateX:0,translateY:-1}},slideLeft:{glsl:"\n      #ifdef GL_ES\n      precision highp float;\n      #endif\n      uniform sampler2D from, to;\n      uniform float progress;\n      uniform vec2 resolution;\n\n      uniform float translateX;\n      uniform float translateY;\n\n      void main() {\n          vec2 texCoord = gl_FragCoord.xy / resolution.xy;\n          float x = progress * translateX;\n          float y = progress * translateY;\n\n          if (x >= 0.0 && y >= 0.0) {\n              if (texCoord.x >= x && texCoord.y >= y) {\n                  gl_FragColor = texture2D(from, texCoord - vec2(x, y));\n              }\n              else {\n                  vec2 uv;\n                  if (x > 0.0)\n                      uv = vec2(x - 1.0, y);\n                  else if (y > 0.0)\n                      uv = vec2(x, y - 1.0);\n                  gl_FragColor = texture2D(to, texCoord - uv);\n              }\n          }\n          else if (x <= 0.0 && y <= 0.0) {\n              if (texCoord.x <= (1.0 + x) && texCoord.y <= (1.0 + y))\n                  gl_FragColor = texture2D(from, texCoord - vec2(x, y));\n              else {\n                  vec2 uv;\n                  if (x < 0.0)\n                      uv = vec2(x + 1.0, y);\n                  else if (y < 0.0)\n                      uv = vec2(x, y + 1.0);\n                  gl_FragColor = texture2D(to, texCoord - uv);\n              }\n          }\n          else\n              gl_FragColor = vec4(0.0);\n      }\n    ",uniforms:{translateX:1,translateY:0}},slideRight:{glsl:"\n      #ifdef GL_ES\n      precision highp float;\n      #endif\n      uniform sampler2D from, to;\n      uniform float progress;\n      uniform vec2 resolution;\n\n      uniform float translateX;\n      uniform float translateY;\n\n      void main() {\n          vec2 texCoord = gl_FragCoord.xy / resolution.xy;\n          float x = progress * translateX;\n          float y = progress * translateY;\n\n          if (x >= 0.0 && y >= 0.0) {\n              if (texCoord.x >= x && texCoord.y >= y) {\n                  gl_FragColor = texture2D(from, texCoord - vec2(x, y));\n              }\n              else {\n                  vec2 uv;\n                  if (x > 0.0)\n                      uv = vec2(x - 1.0, y);\n                  else if (y > 0.0)\n                      uv = vec2(x, y - 1.0);\n                  gl_FragColor = texture2D(to, texCoord - uv);\n              }\n          }\n          else if (x <= 0.0 && y <= 0.0) {\n              if (texCoord.x <= (1.0 + x) && texCoord.y <= (1.0 + y))\n                  gl_FragColor = texture2D(from, texCoord - vec2(x, y));\n              else {\n                  vec2 uv;\n                  if (x < 0.0)\n                      uv = vec2(x + 1.0, y);\n                  else if (y < 0.0)\n                      uv = vec2(x, y + 1.0);\n                  gl_FragColor = texture2D(to, texCoord - uv);\n              }\n          }\n          else\n              gl_FragColor = vec4(0.0);\n      }\n    ",uniforms:{translateX:-1,translateY:0}}};n["default"]=i},{}]},{},[1]);
//# sourceMappingURL=dist/showy.min.js.map